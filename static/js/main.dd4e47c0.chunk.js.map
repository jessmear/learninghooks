{"version":3,"sources":["HooksAppHeader.js","HooksAppCount.js","MyHooksApp.js","index.js"],"names":["HooksAppHeader","props","myState","useContext","MyExampleContext","id","className","bigwords","children","HooksAppCount","count","darktheme","myReducer","myAction","type","myInitialState","React","createContext","ReactDOM","render","useReducer","myDispatch","Provider","value","onClick","document","getElementById"],"mappings":"iNAaeA,MAVf,SAAwBC,GACtB,IAAMC,EAAUC,qBAAWC,GAE3B,OACE,yBAAKC,GAAG,UACN,wBAAIC,UAAWJ,EAAQK,SAAW,WAAa,cAAgBN,EAAMO,YCO5DC,MAZf,SAAuBR,GACrB,IAAMC,EAAUC,qBAAWC,GAE3B,OACE,yBAAKC,GAAG,SACN,uBAAGC,UAAWJ,EAAQK,SAAW,WAAa,cAA9C,8BAC8BL,EAAQQ,MADtC,kCAC4ER,EAAQS,UAAY,YAAc,aAD9G,O,yjBCJN,IAAMC,EAAY,SAACV,EAASW,GAE1B,OAAOA,EAASC,MACd,IAAK,QACH,OAAO,EAAP,GACKZ,EADL,CAEEQ,MAAOR,EAAQQ,MAAQ,EACvBC,WAAYT,EAAQS,YAGxB,IAAK,WACH,OAAO,EAAP,GACKT,EADL,CAEEK,UAAWL,EAAQK,WAGvB,QACE,OAAOL,IAKPa,EAAiB,CACrBJ,WAAW,EACXJ,UAAU,EACVG,MAAO,GAGIN,EAAmBY,IAAMC,gBC3BtCC,IAASC,OAAO,mBD6BD,WAAuB,IAAD,EAELC,qBAAWR,EAAWG,GAFjB,mBAE5Bb,EAF4B,KAEnBmB,EAFmB,KAYnC,OACE,kBAACjB,EAAiBkB,SAAlB,CAA2BC,MAAOrB,GAChC,yBAAKG,GAAIH,EAAQS,UAAY,YAAc,aAAcL,UAAU,cACjE,kBAAC,EAAD,6DACA,4BAAQkB,QAZY,WACxBH,EAAW,CAAEP,KAAM,YAWf,iBACA,kBAAC,EAAD,MACA,4BAAQU,QAVc,WAC1BH,EAAW,CAAEP,KAAM,eASf,oBACA,2BACE,0CADF,2SAGA,+OAGA,2BACE,0CADF,sPCtDQ,MAAgBW,SAASC,eAAe,U","file":"static/js/main.dd4e47c0.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { MyExampleContext } from \"./MyHooksApp\";\n\nfunction HooksAppHeader(props) {\n  const myState = useContext(MyExampleContext);\n\n  return (\n    <div id=\"header\">\n      <h1 className={myState.bigwords ? 'bigwords' : 'smallwords' }>{props.children}</h1>\n    </div>\n  );\n}\n\nexport default HooksAppHeader;\n","import React, { useContext } from 'react';\nimport { MyExampleContext } from \"./MyHooksApp\";\n\nfunction HooksAppCount(props) {\n  const myState = useContext(MyExampleContext);\n\n  return (\n    <div id=\"count\">\n      <p className={myState.bigwords ? 'bigwords' : 'smallwords' }> \n        The theme has been toggled {myState.count} times and is currently set to {myState.darktheme ? 'darktheme' : 'lighttheme'}.\n      </p>\n    </div>\n  );\n}\n\nexport default HooksAppCount;\n","import React, { useReducer } from 'react';\nimport HooksAppHeader from './HooksAppHeader';\nimport HooksAppCount from './HooksAppCount';\n\nconst myReducer = (myState, myAction) => {\n  // console.log({myState, myAction})\n  switch(myAction.type) {\n    case 'theme': {\n      return {\n        ...myState,\n        count: myState.count + 1,\n        darktheme: !myState.darktheme\n      };\n    }\n    case 'bigwords': {\n      return {\n        ...myState,\n        bigwords: !myState.bigwords\n      };\n    }\n    default: {\n      return myState;\n    }\n  }\n}\n\nconst myInitialState = {\n  darktheme: true,\n  bigwords: true,\n  count: 0\n}\n\nexport const MyExampleContext = React.createContext();\n\nexport default function MyHooksApp() {\n\n  const [myState, myDispatch] = useReducer(myReducer, myInitialState);\n\n  const handleColorsClick = () => {\n    myDispatch({ type: 'theme'})\n  }\n\n  const handleTextSizeClick = () => {\n    myDispatch({ type: 'bigwords'})\n  }\n\n  return (\n    <MyExampleContext.Provider value={myState} >\n      <div id={myState.darktheme ? 'darktheme' : 'lighttheme'} className=\"MyHooksApp\">\n        <HooksAppHeader>My Super Awesome useContext and useReducer Hooks App</HooksAppHeader>\n        <button onClick={handleColorsClick}>Toggle Colors</button>\n        <HooksAppCount />\n        <button onClick={handleTextSizeClick}>Toggle Text Size</button>\n        <p>\n          <em>useContext</em> is a hook that allows the coder to create a named context, then surround a small or large peice of the app with thatContext.Provider, which also passes a value, which is (usually) a state object. That gives everything inside the provider, including other components, access to the state object. \n        </p>\n        <p>\n          Components which inherit the context must import the context, and create a variable to hold the contents of the context. Then that variable can be used to display or otherwise use the contents of the context.\n        </p>\n        <p>\n          <em>useReducer</em> is a hook that holds state and updates it through dispatches. The dispatch sends a type of action to the reducer, which uses a switch statement to decide what to do. It is good practice to use the 'default' case to just return the state.\n        </p>\n      </div>\n    </MyExampleContext.Provider>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyHooksApp from './MyHooksApp';\n\nReactDOM.render(<MyHooksApp />, document.getElementById('root'));\n"],"sourceRoot":""}